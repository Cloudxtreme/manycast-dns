#!/bin/env python3

import argparse
import configparser
import imp
import ipaddress
import os
import socket
import sys

import dns.resolver

from manycast import validate
from manycast import rdns


# Check config
if not os.path.exists('config/config.ini'):
    sys.exit('Could not find config/config.ini')

config = configparser.ConfigParser()
config.read('config/config.ini')


# Argparse
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(
    title='Commands',
    dest='command'
)
parse_provision = subparsers.add_parser(
    'provision',
    description="""Populate a new DNS provider with records from another.

    Note: This does not currently create the zones themselves within the
    provider, when provisioning a new provider you are responsible for creating
    the zones initially by hand.
    """
)
parse_provision.add_argument(
    'zone',
    help='eg: whatbox.ca, 192.131.44.0/24,  2620:B8:4000::/48 ',
    metavar="ZONE"
)
parse_provision.add_argument(
    'sync_from',
    choices=config.sections(),
    help='Name of cloud to copy records from',
    metavar="PROVIDER"
)
parse_provision.add_argument(
    'sync_to',
    choices=config.sections(),
    help='Name of cloud to copy records to',
    metavar="PROVIDER"
)

parse_upsert = subparsers.add_parser('upsert')
parse_upsert.add_argument(
    'zone',
    help='eg: whatbox.ca, 192.131.44.0/24,  2620:B8:4000::/48 ',
    metavar="ZONE"
)
parse_upsert.add_argument(
    'name',
    type=str,
    help='eg: bacon.whatbox.ca',
    metavar="NAME"
)
parse_upsert.add_argument(
    'type',
    type=str,
    choices=validate.SUPPORTED_TYPES,
    help='eg: A, AAAA, TXT, CNAME',
    metavar="TYPE"
)
parse_upsert.add_argument(
    'ttl',
    type=int,
    help='Specified in seconds. eg: 300',
    metavar="TTL"
)
parse_upsert.add_argument(
    'values',
    type=str,
    nargs='+',
    metavar="VALUE"
)

parse_delete = subparsers.add_parser('delete')
parse_delete.add_argument(
    'zone',
    help='eg: whatbox.ca, 192.131.44.0/24,  2620:B8:4000::/48 ',
    metavar="ZONE"
)
parse_delete.add_argument(
    'name',
    type=str,
    help='eg: bacon.whatbox.ca',
    metavar="NAME"
)
parse_delete.add_argument(
    'type',
    type=str,
    choices=validate.SUPPORTED_TYPES,
    help='eg: A, AAAA, TXT, CNAME',
    metavar="TYPE"
)
parse_delete.add_argument(
    'ttl',
    type=int,
    help='Specified in seconds. eg: 300',
    metavar="TTL"
)
parse_delete.add_argument(
    'values',
    type=str,
    nargs='+',
    metavar="VALUE"
)

parse_provider_test = subparsers.add_parser(
    'provider-test',
    description="""Test that a provider is working properly"""
)
parse_provider_test.add_argument(
    'zone',
    help='eg: whatbox.ca, 192.131.44.0/24,  2620:B8:4000::/48 ',
    metavar="ZONE"
)
parse_provider_test.add_argument(
    'provider',
    choices=config.sections(),
    help='Name of cloud to copy records from',
    metavar="PROVIDER"
)
parse_provider_test.add_argument(
    'nameservers',
    type=str,
    nargs='+',
    metavar="NAMESERVER"
)


args = parser.parse_args()


# Zone handling
if rdns.is_ip(args.zone):
    zone = rdns.ip_to_arpa(args.zone)
elif rdns.is_cidr(args.zone):
    zone = rdns.cidr_to_arpa(args.zone)
else:
    zone = args.zone + '.'

# Dynamically load providers
providers = {}
for provider_name in config.sections():
    provider_module = imp.load_source(
        'providers.%s' % provider_name,
        './manycast/providers/%s.py' % provider_name
    )

    providers[provider_name] = provider_module.DNS(
        config[provider_name],
        zone
    )


# Do work
if args.command == 'delete':
    for provider_name, provider in providers.items():
        if rdns.is_ip(args.name):
            name = rdns.ip_to_arpa(args.name)
        elif rdns.is_cidr(args.name):
            name = rdns.cidr_to_arpa(args.name)
        else:
            name = args.name + '.'

        validate.validate(
            name=name,
            type=args.type,
            ttl=args.ttl,
            values=args.values
        )

        provider.delete(
            name=name,
            type=args.type,
            ttl=args.ttl,
            values=args.values
        )

elif args.command == 'upsert':
    for provider_name, provider in providers.items():
        if rdns.is_ip(args.name):
            name = rdns.ip_to_arpa(args.name)
        elif rdns.is_cidr(args.name):
            name = rdns.cidr_to_arpa(args.name)
        else:
            name = args.name + '.'

        validate.validate(
            name=name,
            type=args.type,
            ttl=args.ttl,
            values=args.values
        )

        provider.upsert(
            name=name,
            type=args.type,
            ttl=args.ttl,
            values=args.values
        )

elif args.command == 'provision':
    for entry in providers[args.sync_from].list():
        if entry.type in ['SOA', 'NS']:
            continue
        print(entry)
        validate.validate(*entry)
        providers[args.sync_to].upsert(*entry)

    print("NS and SOA records remain untouched")

elif args.command == 'provider-test':
    for ns in args.nameservers:
        dns_client = dns.resolver.Resolver(configure=False)
        dns_client.nameservers = [socket.gethostbyname(ns)]

        for entry in providers[args.provider].list():
            try:
                answer = dns_client.query(entry.name)
                # print(str(answer.rrset))
            except dns.resolver.NoAnswer:
                print("%s NOANSWER %s" % (ns, entry.name))
            except dns.resolver.NXDOMAIN:
                print("%s NXDOMAIN %s" % (ns, entry.name))
